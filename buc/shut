#!/usr/bin/python
# coding=UTF-8

# BUC Customizer
#
# Copyright (C) 2012-2013 Andrea Colangelo
#
# Authors: Andrea Colangelo <warp10@ubuntu.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see: http://www.gnu.org/licenses/gpl-3.0.txt


from gi.repository import AppIndicator3 as appindicator
from gi.repository import Gtk
from gi.repository import Gdk
from gi.repository import GLib
from gi.repository import Notify
from os import system
from time import time, sleep
import hashlib

class Auth_Screen():
    def __init__(self):
        self.auth_screen = Gtk.Window()
        self.auth_screen.set_title("Kill me if you can, n00b!")
        self.auth_screen.fullscreen()
        self.auth_screen.set_keep_above(True)
        #self.auth_screen.set_type_hint(Gdk.WindowTypeHint.SPLASHSCREEN)

        self.main_box = Gtk.VBox(expand="False", spacing=50)
        self.main_box.set_valign(Gtk.Align.CENTER)
        self.auth_screen.add(self.main_box)

	self.label1 = Gtk.Label()
	self.label1.set_markup("<span font_desc=\"15.0\"><b>Attenzione: questa è una sessione ospite: tutti i dati saranno eliminati.</b></span>\n\nSe intendi preservare i tuoi documenti, assicurati di salvarli su una chiavetta.\nLa sessione sarà chiusa automaticamente tra 30 minuti.\nPuoi controllare il tempo rimanente a tua disposizione tramite l'icona nel pannello in alto a destra.");
	self.label1.set_justify(Gtk.Justification.CENTER)
	self.main_box.pack_start(self.label1, False, False, 0)

        self.label2 = Gtk.Label()
	self.label2.set_markup("<span font_desc=\"20.0\">Chiedere all'operatore di abilitare la sessione per continuare.</span>");
        self.main_box.pack_start(self.label2, False, False, 0)

        self.entry_hbox = Gtk.HBox(expand="False", spacing=100)
        self.entry_hbox.set_halign(Gtk.Align.CENTER)
        self.main_box.pack_start(self.entry_hbox, False, False, 0)

        self.entry = Gtk.Entry()
        self.entry.set_visibility(False)
	self.entry.connect("activate", self.auth)
        self.entry_hbox.pack_start(self.entry, False, True, 0)

        self.but_hbox = Gtk.HBox(expand="False", spacing=100)
        self.but_hbox.set_halign(Gtk.Align.CENTER)
        self.main_box.pack_start(self.but_hbox, False, False, 0)

        self.cancelbutton = Gtk.Button(label="Logout")
        self.cancelbutton.connect("clicked", logout)
        self.but_hbox.pack_start(self.cancelbutton, False, False, 0)
        
        self.okbutton = Gtk.Button(label="Entra")
        self.okbutton.connect("clicked", self.auth)
        self.but_hbox.pack_start(self.okbutton, False, False, 0)

        self.auth_screen.show_all()
        Gtk.main()

    def auth(self, *args):
        hash = hashlib.sha256()
        hash.update(self.entry.get_text())
        if hash.hexdigest() == 'b1a8ba0d470fcfd0326964bc1ed4e80753d55e2db296a01dcab4b9fc8cc52b68':
            self.auth_screen.destroy()
            Gtk.main_quit()
        else:
            self.entry.set_text("")

class Shut():
    def __init__(self):
        self.icon = "/usr/share/icons/hicolor/scalable/apps/shut.svg"

        self.label = "30"

        self.show_notice_30()
        GLib.timeout_add_seconds(1200, self.show_notice_10)
        GLib.timeout_add_seconds(1680, self.show_notice_2)
        GLib.timeout_add_seconds(1740, self.show_notice_1)
        GLib.timeout_add_seconds(1800, self.show_notice_0)

        self.load_indicator()

    def load_indicator(self):
        self.ind = appindicator.Indicator.new("shut",
                             self.icon,
                             appindicator.IndicatorCategory.APPLICATION_STATUS)
        self.ind.set_status(appindicator.IndicatorStatus.ACTIVE)

        menu = Gtk.Menu()

        buf = "Minuti disponibili"
        menu_items = Gtk.MenuItem(buf)
        menu.append(menu_items)
        menu_items.connect("activate", self.remaining, buf)
        menu_items.show()

        buf = "Termina sessione"
        menu_items = Gtk.MenuItem(buf)
        menu.append(menu_items)
        menu_items.connect("activate", logout, buf)
        menu_items.show()

        menu_items = Gtk.SeparatorMenuItem()
        menu.append(menu_items)
        menu_items.show()

        buf = "Info"
        menu_items = Gtk.MenuItem(buf)
        menu.append(menu_items)
        menu_items.connect("activate", self.about, buf)
        menu_items.show()

        menu.show()

        self.ind.set_menu(menu)

        self.change_label()
        GLib.timeout_add_seconds(60, self.change_label)

        Gtk.main()

    def change_label(self):
        self.label = str(int(self.label) - 1)
        if self.label == "-1":
            return False
        self.ind.set_label(self.label, "30")

    def show_notice_30(self):
        notice = "Questa sessione sara' terminata automaticamente tra 30 minuti."
        self.show_notice(notice)
        return False

    def show_notice_10(self):
        notice = "Questa sessione sara' terminata automaticamente tra 10 minuti."
        self.show_notice(notice)
        return False

    def show_notice_2(self):
        self.icon = "/usr/share/icons/hicolor/scalable/apps/shut_red.svg"
        self.ind.set_icon_full(self.icon, "shut")
        notice = "Questa sessione sara' terminata automaticamente tra 2 minuti. Concludi il lavoro in corso e salva i tuoi documenti."
        self.show_notice(notice)
        return False

    def show_notice_1(self):
        notice = "Questa sessione sara' terminata automaticamente tra 1 minuto. Concludi il lavoro in corso e salva i tuoi documenti."
        self.show_notice(notice)
        return False

    def show_notice_0(self):
        notice = "Chiusura della sessione in corso!"
        self.show_notice(notice)
        sleep(5)
        logout()

    def remaining(self, *args):
        notice = "Restano " + self.label + " minuti disponibili"
        self.show_notice(notice, header="Tempo disponibile")

    def show_notice(self, notice, header="Avviso: chiusura sessione"):
        icon = self.icon
        Notify.init('Shut')
        n = Notify.Notification.new(header, "\n" + notice, icon)
        n.show()

    def about(self, *args):
        a = Gtk.AboutDialog()
        a.set_program_name("Shut")
        a.set_comments("Tool to Authorize and Logout Users")
        a.set_version("2.0")
        a.set_copyright("Copyright (C) 2012-2013 Andrea Colangelo")
        a.set_license_type(Gtk.License.GPL_3_0)
        a.set_website("http://www.linuxfm.org")
        a.set_artists(["Marco Alici", "Copyright (C) 2013 Marco Alici",
                       "Released under the terms of CC-BY-SA 3.0, see:",
                       "http://creativecommons.org/licenses/by-sa/3.0/"])
        a.run()
        a.destroy()

def logout(self, *args):
    cmd = "dbus-send --session --type=method_call --dest=org.gnome.SessionManager /org/gnome/SessionManager org.gnome.SessionManager.Logout uint32:1"
    system(cmd)

if __name__ == '__main__':
    auth_screen = Auth_Screen()
    shut = Shut()
